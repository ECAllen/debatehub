
# [request_definition] is the definition for the access request. It defines the arguments in e.Enforce(...) function.
# sub, obj, act represents the classic triple: accessing entity (Subject), accessed resource (Object) and the access method (Action). However, you can customize your own request form, like sub, act if you don't need to specify an particular resource, or sub, sub2, obj, act if you somehow have two accessing entities.

[request_definition]
r = sub, obj, act

# [policy_definition] is the definition for the policy. It defines the meaning of the policy. For example, we have the following model:

[policy_definition]
p = sub, obj, act

# [policy_effect] is the definition for the policy effect. It defines whether the access request should be approved if multiple policy rules match the request. For example, one rule permits and the other denies.

[policy_effect]

# [matchers] is the definition for policy matchers. The matchers are expressions. It defines how the policy rules are evaluated against the request.

[matchers]
m = r.sub == p.sub && r.obj == p.obj && r.act == p.act

# [role_definition] is the definition for the RBAC role inheritance relations.
# _, _ means there are two parties inside an inheritance relation. As a common case, you usually use g alone if you only need roles on users.

[role_definition]
g = _, _
