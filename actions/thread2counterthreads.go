package actions

import (
	"github.com/ECAllen/debatehub/models"
	"github.com/gobuffalo/buffalo"
	"github.com/markbates/pop"
	"github.com/pkg/errors"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Thread2counterthread)
// DB Table: Plural (thread2counterthreads)
// Resource: Plural (Thread2counterthreads)
// Path: Plural (/thread2counterthreads)
// View Template Folder: Plural (/templates/thread2counterthreads/)

// Thread2counterthreadsResource is the resource for the thread2counterthread model
type Thread2counterthreadsResource struct {
	buffalo.Resource
}

// List gets all Thread2counterthreads. This function is mapped to the path
// GET /thread2counterthreads
func (v Thread2counterthreadsResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	thread2counterthreads := &models.Thread2counterthreads{}
	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())
	// You can order your list here. Just change
	err := q.All(thread2counterthreads)
	// to:
	// err := q.Order("created_at desc").All(thread2counterthreads)
	if err != nil {
		return errors.WithStack(err)
	}
	// Make Thread2counterthreads available inside the html template
	c.Set("thread2counterthreads", thread2counterthreads)
	// Add the paginator to the context so it can be used in the template.
	c.Set("pagination", q.Paginator)
	return c.Render(200, r.HTML("thread2counterthreads/index.html"))
}

// Show gets the data for one Thread2counterthread. This function is mapped to
// the path GET /thread2counterthreads/{thread2counterthread_id}
func (v Thread2counterthreadsResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty Thread2counterthread
	thread2counterthread := &models.Thread2counterthread{}
	// To find the Thread2counterthread the parameter thread2counterthread_id is used.
	err := tx.Find(thread2counterthread, c.Param("thread2counterthread_id"))
	if err != nil {
		return errors.WithStack(err)
	}
	// Make thread2counterthread available inside the html template
	c.Set("thread2counterthread", thread2counterthread)
	return c.Render(200, r.HTML("thread2counterthreads/show.html"))
}

// New renders the form for creating a new Thread2counterthread.
// This function is mapped to the path GET /thread2counterthreads/new
func (v Thread2counterthreadsResource) New(c buffalo.Context) error {
	// Make thread2counterthread available inside the html template
	c.Set("thread2counterthread", &models.Thread2counterthread{})
	return c.Render(200, r.HTML("thread2counterthreads/new.html"))
}

// Create adds a Thread2counterthread to the DB. This function is mapped to the
// path POST /thread2counterthreads
func (v Thread2counterthreadsResource) Create(c buffalo.Context) error {
	// Allocate an empty Thread2counterthread
	thread2counterthread := &models.Thread2counterthread{}
	// Bind thread2counterthread to the html form elements
	err := c.Bind(thread2counterthread)
	if err != nil {
		return errors.WithStack(err)
	}
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(thread2counterthread)
	if err != nil {
		return errors.WithStack(err)
	}
	if verrs.HasAny() {
		// Make thread2counterthread available inside the html template
		c.Set("thread2counterthread", thread2counterthread)
		// Make the errors available inside the html template
		c.Set("errors", verrs)
		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("thread2counterthreads/new.html"))
	}
	// If there are no errors set a success message
	c.Flash().Add("success", "Thread2counterthread was created successfully")
	// and redirect to the thread2counterthreads index page
	return c.Redirect(302, "/thread2counterthreads/%s", thread2counterthread.ID)
}

// Edit renders a edit form for a thread2counterthread. This function is
// mapped to the path GET /thread2counterthreads/{thread2counterthread_id}/edit
func (v Thread2counterthreadsResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty Thread2counterthread
	thread2counterthread := &models.Thread2counterthread{}
	err := tx.Find(thread2counterthread, c.Param("thread2counterthread_id"))
	if err != nil {
		return errors.WithStack(err)
	}
	// Make thread2counterthread available inside the html template
	c.Set("thread2counterthread", thread2counterthread)
	return c.Render(200, r.HTML("thread2counterthreads/edit.html"))
}

// Update changes a thread2counterthread in the DB. This function is mapped to
// the path PUT /thread2counterthreads/{thread2counterthread_id}
func (v Thread2counterthreadsResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty Thread2counterthread
	thread2counterthread := &models.Thread2counterthread{}
	err := tx.Find(thread2counterthread, c.Param("thread2counterthread_id"))
	if err != nil {
		return errors.WithStack(err)
	}
	// Bind Thread2counterthread to the html form elements
	err = c.Bind(thread2counterthread)
	if err != nil {
		return errors.WithStack(err)
	}
	verrs, err := tx.ValidateAndUpdate(thread2counterthread)
	if err != nil {
		return errors.WithStack(err)
	}
	if verrs.HasAny() {
		// Make thread2counterthread available inside the html template
		c.Set("thread2counterthread", thread2counterthread)
		// Make the errors available inside the html template
		c.Set("errors", verrs)
		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("thread2counterthreads/edit.html"))
	}
	// If there are no errors set a success message
	c.Flash().Add("success", "Thread2counterthread was updated successfully")
	// and redirect to the thread2counterthreads index page
	return c.Redirect(302, "/thread2counterthreads/%s", thread2counterthread.ID)
}

// Destroy deletes a thread2counterthread from the DB. This function is mapped
// to the path DELETE /thread2counterthreads/{thread2counterthread_id}
func (v Thread2counterthreadsResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty Thread2counterthread
	thread2counterthread := &models.Thread2counterthread{}
	// To find the Thread2counterthread the parameter thread2counterthread_id is used.
	err := tx.Find(thread2counterthread, c.Param("thread2counterthread_id"))
	if err != nil {
		return errors.WithStack(err)
	}
	err = tx.Destroy(thread2counterthread)
	if err != nil {
		return errors.WithStack(err)
	}
	// If there are no errors set a flash message
	c.Flash().Add("success", "Thread2counterthread was destroyed successfully")
	// Redirect to the thread2counterthreads index page
	return c.Redirect(302, "/thread2counterthreads")
}
