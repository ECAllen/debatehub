package actions

import (
	"github.com/ECAllen/debatehub/models"
	"github.com/gobuffalo/buffalo"
	"github.com/markbates/pop"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Email)
// DB Table: Plural (Emails)
// Resource: Plural (Emails)
// Path: Plural (/emails)
// View Template Folder: Plural (/templates/emails/)

// EmailsResource is the resource for the email model
type EmailsResource struct {
	buffalo.Resource
}

// List gets all Emails. This function is mapped to the the path
// GET /emails
func (v EmailsResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	emails := &models.Emails{}
	// You can order your list here. Just change
	err := tx.All(emails)
	// to:
	// err := tx.Order("(case when completed then 1 else 2 end) desc, lower([sort_parameter]) asc").All(emails)
	// Don't forget to change [sort_parameter] to the parameter of
	// your model, which should be used for sorting.
	if err != nil {
		return err
	}
	// Make emails available inside the html template
	c.Set("emails", emails)
	return c.Render(200, r.HTML("emails/index.html"))
}

// Show gets the data for one Email. This function is mapped to
// the path GET /emails/{email_id}
func (v EmailsResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty Email
	email := &models.Email{}
	// To find the Email the parameter email_id is used.
	err := tx.Find(email, c.Param("email_id"))
	if err != nil {
		return err
	}
	// Make email available inside the html template
	c.Set("email", email)
	return c.Render(200, r.HTML("emails/show.html"))
}

// New renders the formular for creating a new email.
// This function is mapped to the path GET /emails/new
func (v EmailsResource) New(c buffalo.Context) error {
	// Make email available inside the html template
	c.Set("email", &models.Email{})
	return c.Render(200, r.HTML("emails/new.html"))
}

// Create adds a email to the DB. This function is mapped to the
// path POST /emails
func (v EmailsResource) Create(c buffalo.Context) error {
	// Allocate an empty Email
	email := &models.Email{}
	// Bind email to the html form elements
	err := c.Bind(email)
	if err != nil {
		return err
	}
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(email)
	if err != nil {
		return err
	}
	if verrs.HasAny() {
		// Make email available inside the html template
		c.Set("email", email)
		// Make the errors available inside the html template
		c.Set("errors", verrs)
		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("emails/new.html"))
	}
	// If there are no errors set a success message
	c.Flash().Add("success", "Thank you for subscribing.")
	// and redirect to the emails index page
	//return c.Redirect(302, "/emails/%s", email.ID)
	return c.Redirect(302, "/")
}

// Edit renders a edit formular for a email. This function is
// mapped to the path GET /emails/{email_id}/edit
func (v EmailsResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty Email
	email := &models.Email{}
	err := tx.Find(email, c.Param("email_id"))
	if err != nil {
		return err
	}
	// Make email available inside the html template
	c.Set("email", email)
	return c.Render(200, r.HTML("emails/edit.html"))
}

// Update changes a email in the DB. This function is mapped to
// the path PUT /emails/{email_id}
func (v EmailsResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty Email
	email := &models.Email{}
	err := tx.Find(email, c.Param("email_id"))
	if err != nil {
		return err
	}
	// Bind email to the html form elements
	err = c.Bind(email)
	if err != nil {
		return err
	}
	verrs, err := tx.ValidateAndUpdate(email)
	if err != nil {
		return err
	}
	if verrs.HasAny() {
		// Make email available inside the html template
		c.Set("email", email)
		// Make the errors available inside the html template
		c.Set("errors", verrs)
		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("emails/edit.html"))
	}
	// If there are no errors set a success message
	c.Flash().Add("success", "Email was updated successfully")
	// and redirect to the emails index page
	return c.Redirect(302, "/emails/%s", email.ID)
}

// Destroy deletes a email from the DB. This function is mapped
// to the path DELETE /emails/{email_id}
func (v EmailsResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty Email
	email := &models.Email{}
	// To find the Email the parameter email_id is used.
	err := tx.Find(email, c.Param("email_id"))
	if err != nil {
		return err
	}
	err = tx.Destroy(email)
	if err != nil {
		return err
	}
	// If there are no errors set a flash message
	c.Flash().Add("success", "Email was destroyed successfully")
	// Redirect to the emails index page
	return c.Redirect(302, "/emails")
}
