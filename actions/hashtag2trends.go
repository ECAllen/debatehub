package actions

import (
	"github.com/ECAllen/debatehub/models"
	"github.com/gobuffalo/buffalo"
	"github.com/markbates/pop"
	"github.com/pkg/errors"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Hashtag2trend)
// DB Table: Plural (hashtag2trends)
// Resource: Plural (Hashtag2trends)
// Path: Plural (/hashtag2trends)
// View Template Folder: Plural (/templates/hashtag2trends/)

// Hashtag2trendsResource is the resource for the hashtag2trend model
type Hashtag2trendsResource struct {
	buffalo.Resource
}

// List gets all Hashtag2trends. This function is mapped to the path
// GET /hashtag2trends
func (v Hashtag2trendsResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	hashtag2trends := &models.Hashtag2trends{}
	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())
	// You can order your list here. Just change
	err := q.All(hashtag2trends)
	// to:
	// err := q.Order("created_at desc").All(hashtag2trends)
	if err != nil {
		return errors.WithStack(err)
	}
	// Make Hashtag2trends available inside the html template
	c.Set("hashtag2trends", hashtag2trends)
	// Add the paginator to the context so it can be used in the template.
	c.Set("pagination", q.Paginator)
	return c.Render(200, r.HTML("hashtag2trends/index.html"))
}

// Show gets the data for one Hashtag2trend. This function is mapped to
// the path GET /hashtag2trends/{hashtag2trend_id}
func (v Hashtag2trendsResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty Hashtag2trend
	hashtag2trend := &models.Hashtag2trend{}
	// To find the Hashtag2trend the parameter hashtag2trend_id is used.
	err := tx.Find(hashtag2trend, c.Param("hashtag2trend_id"))
	if err != nil {
		return errors.WithStack(err)
	}
	// Make hashtag2trend available inside the html template
	c.Set("hashtag2trend", hashtag2trend)
	return c.Render(200, r.HTML("hashtag2trends/show.html"))
}

// New renders the form for creating a new Hashtag2trend.
// This function is mapped to the path GET /hashtag2trends/new
func (v Hashtag2trendsResource) New(c buffalo.Context) error {
	// Make hashtag2trend available inside the html template
	c.Set("hashtag2trend", &models.Hashtag2trend{})
	return c.Render(200, r.HTML("hashtag2trends/new.html"))
}

// Create adds a Hashtag2trend to the DB. This function is mapped to the
// path POST /hashtag2trends
func (v Hashtag2trendsResource) Create(c buffalo.Context) error {
	// Allocate an empty Hashtag2trend
	hashtag2trend := &models.Hashtag2trend{}
	// Bind hashtag2trend to the html form elements
	err := c.Bind(hashtag2trend)
	if err != nil {
		return errors.WithStack(err)
	}
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(hashtag2trend)
	if err != nil {
		return errors.WithStack(err)
	}
	if verrs.HasAny() {
		// Make hashtag2trend available inside the html template
		c.Set("hashtag2trend", hashtag2trend)
		// Make the errors available inside the html template
		c.Set("errors", verrs)
		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("hashtag2trends/new.html"))
	}
	// If there are no errors set a success message
	c.Flash().Add("success", "Hashtag2trend was created successfully")
	// and redirect to the hashtag2trends index page
	return c.Redirect(302, "/hashtag2trends/%s", hashtag2trend.ID)
}

// Edit renders a edit form for a hashtag2trend. This function is
// mapped to the path GET /hashtag2trends/{hashtag2trend_id}/edit
func (v Hashtag2trendsResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty Hashtag2trend
	hashtag2trend := &models.Hashtag2trend{}
	err := tx.Find(hashtag2trend, c.Param("hashtag2trend_id"))
	if err != nil {
		return errors.WithStack(err)
	}
	// Make hashtag2trend available inside the html template
	c.Set("hashtag2trend", hashtag2trend)
	return c.Render(200, r.HTML("hashtag2trends/edit.html"))
}

// Update changes a hashtag2trend in the DB. This function is mapped to
// the path PUT /hashtag2trends/{hashtag2trend_id}
func (v Hashtag2trendsResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty Hashtag2trend
	hashtag2trend := &models.Hashtag2trend{}
	err := tx.Find(hashtag2trend, c.Param("hashtag2trend_id"))
	if err != nil {
		return errors.WithStack(err)
	}
	// Bind Hashtag2trend to the html form elements
	err = c.Bind(hashtag2trend)
	if err != nil {
		return errors.WithStack(err)
	}
	verrs, err := tx.ValidateAndUpdate(hashtag2trend)
	if err != nil {
		return errors.WithStack(err)
	}
	if verrs.HasAny() {
		// Make hashtag2trend available inside the html template
		c.Set("hashtag2trend", hashtag2trend)
		// Make the errors available inside the html template
		c.Set("errors", verrs)
		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("hashtag2trends/edit.html"))
	}
	// If there are no errors set a success message
	c.Flash().Add("success", "Hashtag2trend was updated successfully")
	// and redirect to the hashtag2trends index page
	return c.Redirect(302, "/hashtag2trends/%s", hashtag2trend.ID)
}

// Destroy deletes a hashtag2trend from the DB. This function is mapped
// to the path DELETE /hashtag2trends/{hashtag2trend_id}
func (v Hashtag2trendsResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty Hashtag2trend
	hashtag2trend := &models.Hashtag2trend{}
	// To find the Hashtag2trend the parameter hashtag2trend_id is used.
	err := tx.Find(hashtag2trend, c.Param("hashtag2trend_id"))
	if err != nil {
		return errors.WithStack(err)
	}
	err = tx.Destroy(hashtag2trend)
	if err != nil {
		return errors.WithStack(err)
	}
	// If there are no errors set a flash message
	c.Flash().Add("success", "Hashtag2trend was destroyed successfully")
	// Redirect to the hashtag2trends index page
	return c.Redirect(302, "/hashtag2trends")
}
