package actions

import (
	"github.com/ECAllen/debatehub/models"
	"github.com/gobuffalo/buffalo"
	"github.com/markbates/pop"
	"github.com/pkg/errors"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Debates2point)
// DB Table: Plural (debates2points)
// Resource: Plural (Debates2points)
// Path: Plural (/debates2points)
// View Template Folder: Plural (/templates/debates2points/)

// Debates2pointsResource is the resource for the debates2point model
type Debates2pointsResource struct {
	buffalo.Resource
}

// List gets all Debates2points. This function is mapped to the path
// GET /debates2points
func (v Debates2pointsResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	debates2points := &models.Debates2points{}
	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())
	// You can order your list here. Just change
	err := q.All(debates2points)
	// to:
	// err := q.Order("created_at desc").All(debates2points)
	if err != nil {
		return errors.WithStack(err)
	}
	// Make Debates2points available inside the html template
	c.Set("debates2points", debates2points)
	// Add the paginator to the context so it can be used in the template.
	c.Set("pagination", q.Paginator)
	return c.Render(200, r.HTML("debates2points/index.html"))
}

// Show gets the data for one Debates2point. This function is mapped to
// the path GET /debates2points/{debates2point_id}
func (v Debates2pointsResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty Debates2point
	debates2point := &models.Debates2point{}
	// To find the Debates2point the parameter debates2point_id is used.
	err := tx.Find(debates2point, c.Param("debates2point_id"))
	if err != nil {
		return errors.WithStack(err)
	}
	// Make debates2point available inside the html template
	c.Set("debates2point", debates2point)
	return c.Render(200, r.HTML("debates2points/show.html"))
}

// New renders the formular for creating a new Debates2point.
// This function is mapped to the path GET /debates2points/new
func (v Debates2pointsResource) New(c buffalo.Context) error {
	// Make debates2point available inside the html template
	c.Set("debates2point", &models.Debates2point{})
	return c.Render(200, r.HTML("debates2points/new.html"))
}

// Create adds a Debates2point to the DB. This function is mapped to the
// path POST /debates2points
func (v Debates2pointsResource) Create(c buffalo.Context) error {
	// Allocate an empty Debates2point
	debates2point := &models.Debates2point{}
	// Bind debates2point to the html form elements
	err := c.Bind(debates2point)
	if err != nil {
		return errors.WithStack(err)
	}
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(debates2point)
	if err != nil {
		return errors.WithStack(err)
	}
	if verrs.HasAny() {
		// Make debates2point available inside the html template
		c.Set("debates2point", debates2point)
		// Make the errors available inside the html template
		c.Set("errors", verrs)
		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("debates2points/new.html"))
	}
	// If there are no errors set a success message
	c.Flash().Add("success", "Debates2point was created successfully")
	// and redirect to the debates2points index page
	return c.Redirect(302, "/debates2points/%s", debates2point.ID)
}

// Edit renders a edit formular for a debates2point. This function is
// mapped to the path GET /debates2points/{debates2point_id}/edit
func (v Debates2pointsResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty Debates2point
	debates2point := &models.Debates2point{}
	err := tx.Find(debates2point, c.Param("debates2point_id"))
	if err != nil {
		return errors.WithStack(err)
	}
	// Make debates2point available inside the html template
	c.Set("debates2point", debates2point)
	return c.Render(200, r.HTML("debates2points/edit.html"))
}

// Update changes a debates2point in the DB. This function is mapped to
// the path PUT /debates2points/{debates2point_id}
func (v Debates2pointsResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty Debates2point
	debates2point := &models.Debates2point{}
	err := tx.Find(debates2point, c.Param("debates2point_id"))
	if err != nil {
		return errors.WithStack(err)
	}
	// Bind Debates2point to the html form elements
	err = c.Bind(debates2point)
	if err != nil {
		return errors.WithStack(err)
	}
	verrs, err := tx.ValidateAndUpdate(debates2point)
	if err != nil {
		return errors.WithStack(err)
	}
	if verrs.HasAny() {
		// Make debates2point available inside the html template
		c.Set("debates2point", debates2point)
		// Make the errors available inside the html template
		c.Set("errors", verrs)
		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("debates2points/edit.html"))
	}
	// If there are no errors set a success message
	c.Flash().Add("success", "Debates2point was updated successfully")
	// and redirect to the debates2points index page
	return c.Redirect(302, "/debates2points/%s", debates2point.ID)
}

// Destroy deletes a debates2point from the DB. This function is mapped
// to the path DELETE /debates2points/{debates2point_id}
func (v Debates2pointsResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty Debates2point
	debates2point := &models.Debates2point{}
	// To find the Debates2point the parameter debates2point_id is used.
	err := tx.Find(debates2point, c.Param("debates2point_id"))
	if err != nil {
		return errors.WithStack(err)
	}
	err = tx.Destroy(debates2point)
	if err != nil {
		return errors.WithStack(err)
	}
	// If there are no errors set a flash message
	c.Flash().Add("success", "Debates2point was destroyed successfully")
	// Redirect to the debates2points index page
	return c.Redirect(302, "/debates2points")
}
