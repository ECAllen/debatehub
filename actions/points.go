package actions

import (
	"github.com/ECAllen/debatehub/models"
	"github.com/gobuffalo/buffalo"
	"github.com/markbates/pop"
	"github.com/pkg/errors"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Point)
// DB Table: Plural (points)
// Resource: Plural (Points)
// Path: Plural (/points)
// View Template Folder: Plural (/templates/points/)

// PointsResource is the resource for the point model
type PointsResource struct {
	buffalo.Resource
}

// List gets all Points. This function is mapped to the path
// GET /points
func (v PointsResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	points := &models.Points{}
	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())
	// You can order your list here. Just change
	err := q.All(points)
	// to:
	// err := q.Order("created_at desc").All(points)
	if err != nil {
		return errors.WithStack(err)
	}
	// Make Points available inside the html template
	c.Set("points", points)
	// Add the paginator to the context so it can be used in the template.
	c.Set("pagination", q.Paginator)
	return c.Render(200, r.HTML("points/index.html"))
}

// Show gets the data for one Point. This function is mapped to
// the path GET /points/{point_id}
func (v PointsResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty Point
	point := &models.Point{}
	// To find the Point the parameter point_id is used.
	err := tx.Find(point, c.Param("point_id"))
	if err != nil {
		return errors.WithStack(err)
	}
	// Make point available inside the html template
	c.Set("point", point)
	return c.Render(200, r.HTML("points/show.html"))
}

// New renders the formular for creating a new Point.
// This function is mapped to the path GET /points/new
func (v PointsResource) New(c buffalo.Context) error {
	// Make point available inside the html template
	c.Set("point", &models.Point{})
	return c.Render(200, r.HTML("points/new.html"))
}

// Create adds a Point to the DB. This function is mapped to the
// path POST /points
func (v PointsResource) Create(c buffalo.Context) error {
	// Allocate an empty Point
	point := &models.Point{}
	// Bind point to the html form elements
	err := c.Bind(point)
	if err != nil {
		return errors.WithStack(err)
	}
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(point)
	if err != nil {
		return errors.WithStack(err)
	}
	if verrs.HasAny() {
		// Make point available inside the html template
		c.Set("point", point)
		// Make the errors available inside the html template
		c.Set("errors", verrs)
		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("points/new.html"))
	}
	// If there are no errors set a success message
	c.Flash().Add("success", "Point was created successfully")
	// and redirect to the points index page
	return c.Redirect(302, "/points/%s", point.ID)
}

// Edit renders a edit formular for a point. This function is
// mapped to the path GET /points/{point_id}/edit
func (v PointsResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty Point
	point := &models.Point{}
	err := tx.Find(point, c.Param("point_id"))
	if err != nil {
		return errors.WithStack(err)
	}
	// Make point available inside the html template
	c.Set("point", point)
	return c.Render(200, r.HTML("points/edit.html"))
}

// Update changes a point in the DB. This function is mapped to
// the path PUT /points/{point_id}
func (v PointsResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty Point
	point := &models.Point{}
	err := tx.Find(point, c.Param("point_id"))
	if err != nil {
		return errors.WithStack(err)
	}
	// Bind Point to the html form elements
	err = c.Bind(point)
	if err != nil {
		return errors.WithStack(err)
	}
	verrs, err := tx.ValidateAndUpdate(point)
	if err != nil {
		return errors.WithStack(err)
	}
	if verrs.HasAny() {
		// Make point available inside the html template
		c.Set("point", point)
		// Make the errors available inside the html template
		c.Set("errors", verrs)
		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("points/edit.html"))
	}
	// If there are no errors set a success message
	c.Flash().Add("success", "Point was updated successfully")
	// and redirect to the points index page
	return c.Redirect(302, "/points/%s", point.ID)
}

// Destroy deletes a point from the DB. This function is mapped
// to the path DELETE /points/{point_id}
func (v PointsResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty Point
	point := &models.Point{}
	// To find the Point the parameter point_id is used.
	err := tx.Find(point, c.Param("point_id"))
	if err != nil {
		return errors.WithStack(err)
	}
	err = tx.Destroy(point)
	if err != nil {
		return errors.WithStack(err)
	}
	// If there are no errors set a flash message
	c.Flash().Add("success", "Point was destroyed successfully")
	// Redirect to the points index page
	return c.Redirect(302, "/points")
}
