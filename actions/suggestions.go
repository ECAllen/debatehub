package actions

import (
	"github.com/ECAllen/debatehub/models"
	"github.com/gobuffalo/buffalo"
	"github.com/markbates/pop"
	"github.com/pkg/errors"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Suggestion)
// DB Table: Plural (suggestions)
// Resource: Plural (Suggestions)
// Path: Plural (/suggestions)
// View Template Folder: Plural (/templates/suggestions/)

// SuggestionsResource is the resource for the suggestion model
type SuggestionsResource struct {
	buffalo.Resource
}

// List gets all Suggestions. This function is mapped to the path
// GET /suggestions
func (v SuggestionsResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)

	suggestions := &models.Suggestions{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	// Retrieve all Suggestions from the DB
	if err := q.All(suggestions); err != nil {
		return errors.WithStack(err)
	}

	// Make Suggestions available inside the html template
	c.Set("suggestions", suggestions)

	// Add the paginator to the context so it can be used in the template.
	c.Set("pagination", q.Paginator)

	return c.Render(200, r.HTML("suggestions/index.html"))
}

// Show gets the data for one Suggestion. This function is mapped to
// the path GET /suggestions/{suggestion_id}
func (v SuggestionsResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)

	// Allocate an empty Suggestion
	suggestion := &models.Suggestion{}

	// To find the Suggestion the parameter suggestion_id is used.
	if err := tx.Find(suggestion, c.Param("suggestion_id")); err != nil {
		return c.Error(404, err)
	}

	// Make suggestion available inside the html template
	c.Set("suggestion", suggestion)

	return c.Render(200, r.HTML("suggestions/show.html"))
}

// New renders the form for creating a new Suggestion.
// This function is mapped to the path GET /suggestions/new
func (v SuggestionsResource) New(c buffalo.Context) error {
	// Make suggestion available inside the html template
	c.Set("suggestion", &models.Suggestion{})

	return c.Render(200, r.HTML("suggestions/new.html"))
}

// Create adds a Suggestion to the DB. This function is mapped to the
// path POST /suggestions
func (v SuggestionsResource) Create(c buffalo.Context) error {
	// Allocate an empty Suggestion
	suggestion := &models.Suggestion{}

	// Bind suggestion to the html form elements
	if err := c.Bind(suggestion); err != nil {
		return errors.WithStack(err)
	}

	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(suggestion)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make suggestion available inside the html template
		c.Set("suggestion", suggestion)

		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("suggestions/new.html"))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "Thank you for the suggestion. Contact debatehub@protonmail.com if you would like us to follow-up.")

	// and redirect to the suggestions index page
	return c.Redirect(302, c.Value("previous_path").(string))
}

// Edit renders a edit form for a suggestion. This function is
// mapped to the path GET /suggestions/{suggestion_id}/edit
func (v SuggestionsResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)

	// Allocate an empty Suggestion
	suggestion := &models.Suggestion{}

	if err := tx.Find(suggestion, c.Param("suggestion_id")); err != nil {
		return c.Error(404, err)
	}

	// Make suggestion available inside the html template
	c.Set("suggestion", suggestion)
	return c.Render(200, r.HTML("suggestions/edit.html"))
}

// Update changes a suggestion in the DB. This function is mapped to
// the path PUT /suggestions/{suggestion_id}
func (v SuggestionsResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)

	// Allocate an empty Suggestion
	suggestion := &models.Suggestion{}

	if err := tx.Find(suggestion, c.Param("suggestion_id")); err != nil {
		return c.Error(404, err)
	}

	// Bind Suggestion to the html form elements
	if err := c.Bind(suggestion); err != nil {
		return errors.WithStack(err)
	}

	verrs, err := tx.ValidateAndUpdate(suggestion)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make suggestion available inside the html template
		c.Set("suggestion", suggestion)

		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("suggestions/edit.html"))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "Suggestion was updated successfully")

	// and redirect to the suggestions index page
	return c.Redirect(302, "/suggestions/%s", suggestion.ID)
}

// Destroy deletes a suggestion from the DB. This function is mapped
// to the path DELETE /suggestions/{suggestion_id}
func (v SuggestionsResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)

	// Allocate an empty Suggestion
	suggestion := &models.Suggestion{}

	// To find the Suggestion the parameter suggestion_id is used.
	if err := tx.Find(suggestion, c.Param("suggestion_id")); err != nil {
		return c.Error(404, err)
	}

	if err := tx.Destroy(suggestion); err != nil {
		return errors.WithStack(err)
	}

	// If there are no errors set a flash message
	c.Flash().Add("success", "Suggestion was destroyed successfully")

	// Redirect to the suggestions index page
	return c.Redirect(302, "/suggestions")
}
