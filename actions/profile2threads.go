package actions

import (
	"github.com/ECAllen/debatehub/models"
	"github.com/gobuffalo/buffalo"
	"github.com/markbates/pop"
	"github.com/pkg/errors"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Profile2thread)
// DB Table: Plural (profile2threads)
// Resource: Plural (Profile2threads)
// Path: Plural (/profile2threads)
// View Template Folder: Plural (/templates/profile2threads/)

// Profile2threadsResource is the resource for the profile2thread model
type Profile2threadsResource struct {
	buffalo.Resource
}

// List gets all Profile2threads. This function is mapped to the path
// GET /profile2threads
func (v Profile2threadsResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	profile2threads := &models.Profile2threads{}
	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())
	// You can order your list here. Just change
	err := q.All(profile2threads)
	// to:
	// err := q.Order("created_at desc").All(profile2threads)
	if err != nil {
		return errors.WithStack(err)
	}
	// Make Profile2threads available inside the html template
	c.Set("profile2threads", profile2threads)
	// Add the paginator to the context so it can be used in the template.
	c.Set("pagination", q.Paginator)
	return c.Render(200, r.HTML("profile2threads/index.html"))
}

// Show gets the data for one Profile2thread. This function is mapped to
// the path GET /profile2threads/{profile2thread_id}
func (v Profile2threadsResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty Profile2thread
	profile2thread := &models.Profile2thread{}
	// To find the Profile2thread the parameter profile2thread_id is used.
	err := tx.Find(profile2thread, c.Param("profile2thread_id"))
	if err != nil {
		return errors.WithStack(err)
	}
	// Make profile2thread available inside the html template
	c.Set("profile2thread", profile2thread)
	return c.Render(200, r.HTML("profile2threads/show.html"))
}

// New renders the form for creating a new Profile2thread.
// This function is mapped to the path GET /profile2threads/new
func (v Profile2threadsResource) New(c buffalo.Context) error {
	// Make profile2thread available inside the html template
	c.Set("profile2thread", &models.Profile2thread{})
	return c.Render(200, r.HTML("profile2threads/new.html"))
}

// Create adds a Profile2thread to the DB. This function is mapped to the
// path POST /profile2threads
func (v Profile2threadsResource) Create(c buffalo.Context) error {
	// Allocate an empty Profile2thread
	profile2thread := &models.Profile2thread{}
	// Bind profile2thread to the html form elements
	err := c.Bind(profile2thread)
	if err != nil {
		return errors.WithStack(err)
	}
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(profile2thread)
	if err != nil {
		return errors.WithStack(err)
	}
	if verrs.HasAny() {
		// Make profile2thread available inside the html template
		c.Set("profile2thread", profile2thread)
		// Make the errors available inside the html template
		c.Set("errors", verrs)
		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("profile2threads/new.html"))
	}
	// If there are no errors set a success message
	c.Flash().Add("success", "Profile2thread was created successfully")
	// and redirect to the profile2threads index page
	return c.Redirect(302, "/profile2threads/%s", profile2thread.ID)
}

// Edit renders a edit form for a profile2thread. This function is
// mapped to the path GET /profile2threads/{profile2thread_id}/edit
func (v Profile2threadsResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty Profile2thread
	profile2thread := &models.Profile2thread{}
	err := tx.Find(profile2thread, c.Param("profile2thread_id"))
	if err != nil {
		return errors.WithStack(err)
	}
	// Make profile2thread available inside the html template
	c.Set("profile2thread", profile2thread)
	return c.Render(200, r.HTML("profile2threads/edit.html"))
}

// Update changes a profile2thread in the DB. This function is mapped to
// the path PUT /profile2threads/{profile2thread_id}
func (v Profile2threadsResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty Profile2thread
	profile2thread := &models.Profile2thread{}
	err := tx.Find(profile2thread, c.Param("profile2thread_id"))
	if err != nil {
		return errors.WithStack(err)
	}
	// Bind Profile2thread to the html form elements
	err = c.Bind(profile2thread)
	if err != nil {
		return errors.WithStack(err)
	}
	verrs, err := tx.ValidateAndUpdate(profile2thread)
	if err != nil {
		return errors.WithStack(err)
	}
	if verrs.HasAny() {
		// Make profile2thread available inside the html template
		c.Set("profile2thread", profile2thread)
		// Make the errors available inside the html template
		c.Set("errors", verrs)
		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("profile2threads/edit.html"))
	}
	// If there are no errors set a success message
	c.Flash().Add("success", "Profile2thread was updated successfully")
	// and redirect to the profile2threads index page
	return c.Redirect(302, "/profile2threads/%s", profile2thread.ID)
}

// Destroy deletes a profile2thread from the DB. This function is mapped
// to the path DELETE /profile2threads/{profile2thread_id}
func (v Profile2threadsResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty Profile2thread
	profile2thread := &models.Profile2thread{}
	// To find the Profile2thread the parameter profile2thread_id is used.
	err := tx.Find(profile2thread, c.Param("profile2thread_id"))
	if err != nil {
		return errors.WithStack(err)
	}
	err = tx.Destroy(profile2thread)
	if err != nil {
		return errors.WithStack(err)
	}
	// If there are no errors set a flash message
	c.Flash().Add("success", "Profile2thread was destroyed successfully")
	// Redirect to the profile2threads index page
	return c.Redirect(302, "/profile2threads")
}
