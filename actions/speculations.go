package actions

import (
	"github.com/ECAllen/debatehub/models"
	"github.com/gobuffalo/buffalo"
	"github.com/markbates/pop"
	"github.com/pkg/errors"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Speculation)
// DB Table: Plural (Speculations)
// Resource: Plural (Speculations)
// Path: Plural (/speculations)
// View Template Folder: Plural (/templates/speculations/)

// SpeculationsResource is the resource for the speculation model
type SpeculationsResource struct {
	buffalo.Resource
}

// List gets all Speculations. This function is mapped to the path
// GET /speculations
func (v SpeculationsResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	speculations := &models.Speculations{}
	// You can order your list here. Just change
	err := tx.All(speculations)
	// to:
	// err := tx.Order("create_at desc").All(speculations)
	if err != nil {
		return errors.WithStack(err)
	}
	// Make speculations available inside the html template
	c.Set("speculations", speculations)
	return c.Render(200, r.HTML("speculations/index.html"))
}

// Show gets the data for one Speculation. This function is mapped to
// the path GET /speculations/{speculation_id}
func (v SpeculationsResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty Speculation
	speculation := &models.Speculation{}
	// To find the Speculation the parameter speculation_id is used.
	err := tx.Find(speculation, c.Param("speculation_id"))
	if err != nil {
		return errors.WithStack(err)
	}
	// Make speculation available inside the html template
	c.Set("speculation", speculation)
	return c.Render(200, r.HTML("speculations/show.html"))
}

// New renders the formular for creating a new speculation.
// This function is mapped to the path GET /speculations/new
func (v SpeculationsResource) New(c buffalo.Context) error {
	// Make speculation available inside the html template
	c.Set("speculation", &models.Speculation{})
	return c.Render(200, r.HTML("speculations/new.html"))
}

// Create adds a speculation to the DB. This function is mapped to the
// path POST /speculations
func (v SpeculationsResource) Create(c buffalo.Context) error {
	// Allocate an empty Speculation
	speculation := &models.Speculation{}
	// Bind speculation to the html form elements
	err := c.Bind(speculation)
	if err != nil {
		return errors.WithStack(err)
	}
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(speculation)
	if err != nil {
		return errors.WithStack(err)
	}
	if verrs.HasAny() {
		// Make speculation available inside the html template
		c.Set("speculation", speculation)
		// Make the errors available inside the html template
		c.Set("errors", verrs)
		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("speculations/new.html"))
	}
	// If there are no errors set a success message
	c.Flash().Add("success", "Speculation was created successfully")
	// and redirect to the speculations index page
	return c.Redirect(302, "/speculations/%s", speculation.ID)
}

// Edit renders a edit formular for a speculation. This function is
// mapped to the path GET /speculations/{speculation_id}/edit
func (v SpeculationsResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty Speculation
	speculation := &models.Speculation{}
	err := tx.Find(speculation, c.Param("speculation_id"))
	if err != nil {
		return errors.WithStack(err)
	}
	// Make speculation available inside the html template
	c.Set("speculation", speculation)
	return c.Render(200, r.HTML("speculations/edit.html"))
}

// Update changes a speculation in the DB. This function is mapped to
// the path PUT /speculations/{speculation_id}
func (v SpeculationsResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty Speculation
	speculation := &models.Speculation{}
	err := tx.Find(speculation, c.Param("speculation_id"))
	if err != nil {
		return errors.WithStack(err)
	}
	// Bind speculation to the html form elements
	err = c.Bind(speculation)
	if err != nil {
		return errors.WithStack(err)
	}
	verrs, err := tx.ValidateAndUpdate(speculation)
	if err != nil {
		return errors.WithStack(err)
	}
	if verrs.HasAny() {
		// Make speculation available inside the html template
		c.Set("speculation", speculation)
		// Make the errors available inside the html template
		c.Set("errors", verrs)
		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("speculations/edit.html"))
	}
	// If there are no errors set a success message
	c.Flash().Add("success", "Speculation was updated successfully")
	// and redirect to the speculations index page
	return c.Redirect(302, "/speculations/%s", speculation.ID)
}

// Destroy deletes a speculation from the DB. This function is mapped
// to the path DELETE /speculations/{speculation_id}
func (v SpeculationsResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty Speculation
	speculation := &models.Speculation{}
	// To find the Speculation the parameter speculation_id is used.
	err := tx.Find(speculation, c.Param("speculation_id"))
	if err != nil {
		return errors.WithStack(err)
	}
	err = tx.Destroy(speculation)
	if err != nil {
		return errors.WithStack(err)
	}
	// If there are no errors set a flash message
	c.Flash().Add("success", "Speculation was destroyed successfully")
	// Redirect to the speculations index page
	return c.Redirect(302, "/speculations")
}

// <================>Added<=================>

// New renders the formular for creating a new speculation.
// This function is mapped to the path GET /speculations/submit
func SpeculationSubmit(c buffalo.Context) error {
	// Make speculation available inside the html template
	c.Set("speculation", &models.Speculation{})
	// return c.Render(200, r.HTML("speculations/new.html"))
	return c.Render(200, r.HTML("speculations/submit.html"))
}

// List gets all Speculations. This function is mapped to the path
// GET /speculations
func SpeculationsAdmin(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	speculations := &models.Speculations{}
	// You can order your list here. Just change
	// err := tx.All(speculations)
	// to:
	// err := tx.Order("create_at desc").All(speculations)
	err := tx.Where("reject = false").Where("publish = false").All(speculations)
	if err != nil {
		return errors.WithStack(err)
	}

	// Make speculations available inside the html template
	c.Set("speculations", speculations)
	return c.Render(200, r.HTML("speculations/admin.html"))
}
