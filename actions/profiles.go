package actions

import (
	"fmt"
	"github.com/ECAllen/debatehub/models"
	"github.com/gobuffalo/buffalo"
	"github.com/markbates/pop"
	"github.com/satori/go.uuid"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Profile)
// DB Table: Plural (Profiles)
// Resource: Plural (Profiles)
// Path: Plural (/profiles)
// View Template Folder: Plural (/templates/profiles/)

// ProfilesResource is the resource for the profile model
type ProfilesResource struct {
	buffalo.Resource
}

// List gets all Profiles. This function is mapped to the the path
// GET /profiles
func (v ProfilesResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	profiles := &models.Profiles{}
	// You can order your list here. Just change
	err := tx.All(profiles)
	// to:
	// err := tx.Order("(case when completed then 1 else 2 end) desc, lower([sort_parameter]) asc").All(profiles)
	// Don't forget to change [sort_parameter] to the parameter of
	// your model, which should be used for sorting.
	if err != nil {
		return err
	}
	// Make profiles available inside the html template
	c.Set("profiles", profiles)
	return c.Render(200, r.HTML("profiles/index.html"))
}

// Show gets the data for one Profile. This function is mapped to
// the path GET /profiles/{profile_id}
func (v ProfilesResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty Profile
	profile := &models.Profile{}
	// To find the Profile the parameter profile_id is used.
	err := tx.Find(profile, c.Param("profile_id"))
	if err != nil {
		return err
	}
	// Make profile available inside the html template
	c.Set("profile", profile)
	return c.Render(200, r.HTML("profiles/show.html"))
}

// New renders the formular for creating a new profile.
// This function is mapped to the path GET /profiles/new
func (v ProfilesResource) New(c buffalo.Context) error {
	// Make profile available inside the html template
	c.Set("profile", &models.Profile{})
	return c.Render(200, r.HTML("profiles/new.html"))
}

// Create adds a profile to the DB. This function is mapped to the
// path POST /profiles
func (v ProfilesResource) Create(c buffalo.Context) error {
	// Allocate an empty Profile
	profile := &models.Profile{}

	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)

	profile_id := c.Session().Get("UserID").(uuid.UUID)
	err := tx.Find(profile, profile_id)
	if err != nil {
		return err
	}

	// Bind profile to the html form elements
	err = c.Bind(profile)
	if err != nil {
		return err
	}

	verrs, err := tx.ValidateAndUpdate(profile)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		// Make profile available inside the html template
		c.Set("profile", profile)
		// Make the errors available inside the html template
		c.Set("errors", verrs)
		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("profiles/submit.html"))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "Profile was created successfully")
	// and redirect to the profiles index page
	return c.Redirect(302, "/profiles/%s", profile.ID)
}

// Edit renders a edit formular for a profile. This function is
// mapped to the path GET /profiles/{profile_id}/edit
func (v ProfilesResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty Profile
	profile := &models.Profile{}
	err := tx.Find(profile, c.Param("profile_id"))
	if err != nil {
		return err
	}
	// Make profile available inside the html template
	c.Set("profile", profile)
	return c.Render(200, r.HTML("profiles/edit.html"))
}

// Update changes a profile in the DB. This function is mapped to
// the path PUT /profiles/{profile_id}
func (v ProfilesResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty Profile
	profile := &models.Profile{}
	err := tx.Find(profile, c.Param("profile_id"))
	if err != nil {
		return err
	}
	// Bind profile to the html form elements
	err = c.Bind(profile)
	if err != nil {
		return err
	}
	verrs, err := tx.ValidateAndUpdate(profile)
	if err != nil {
		return err
	}
	if verrs.HasAny() {
		// Make profile available inside the html template
		c.Set("profile", profile)
		// Make the errors available inside the html template
		c.Set("errors", verrs)
		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("profiles/edit.html"))
	}
	// If there are no errors set a success message
	c.Flash().Add("success", "Profile was updated successfully")
	// and redirect to the profiles index page
	return c.Redirect(302, "/profiles/%s", profile.ID)
}

// Destroy deletes a profile from the DB. This function is mapped
// to the path DELETE /profiles/{profile_id}
func (v ProfilesResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty Profile
	profile := &models.Profile{}
	// To find the Profile the parameter profile_id is used.
	err := tx.Find(profile, c.Param("profile_id"))
	if err != nil {
		return err
	}
	err = tx.Destroy(profile)
	if err != nil {
		return err
	}
	// If there are no errors set a flash message
	c.Flash().Add("success", "Profile was destroyed successfully")
	// Redirect to the profiles index page
	return c.Redirect(302, "/profiles")
}

// <================>Added<=================>

// This function is mapped to the path GET /profiles/submit
func ProfilesSubmit(c buffalo.Context) error {
	userId := c.Session().Get("UserID")
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty Profile
	profile := &models.Profile{}
	err := tx.Find(profile, userId)
	if err != nil {
		return err
	}

	// Make profile available inside the html template
	c.Set("profile", &models.Profile{})
	c.Set("FirstName", profile.FirstName)
	c.Set("LastName", profile.LastName)
	c.Set("NickName", profile.NickName)
	c.Set("Email", profile.Email)
	c.Set("AvatarURL", profile.AvatarURL)
	return c.Render(200, r.HTML("profiles/submit.html"))
}

func ProfileUserShow(c buffalo.Context) error {
	userId := c.Session().Get("UserID")
	path := fmt.Sprintf("/profiles/%s", userId)
	return c.Redirect(302, path)
}

// List gets all Profiles. This function is mapped to the path
// GET /profiles
//func ProfilesAdmin(c buffalo.Context) error {
//	// Get the DB connection from the context
//	tx := c.Value("tx").(*pop.Connection)
//	profiles := &models.Profiles{}
//	// You can order your list here. Just change
//	// err := tx.All(profiles)
//	// to:
//	// err := tx.Order("create_at desc").All(profiles)
//	err := tx.Where("reject = false").Where("publish = false").All(profiles)
//	if err != nil {
//		return err
//	}
//
//	// Make profiles available inside the html template
//	c.Set("profiles", profiles)
//	return c.Render(200, r.HTML("profiles/admin.html"))
//}
